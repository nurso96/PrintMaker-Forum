// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// User Management & Authentication
// ============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String?   @unique
  bio           String?   @db.Text
  location      String?
  website       String?
  
  // Forum-specific fields
  role          UserRole  @default(USER)
  reputation    Int       @default(0)
  totalPosts    Int       @default(0) @map("total_posts")
  totalThreads  Int       @default(0) @map("total_threads")
  joinedAt      DateTime  @default(now()) @map("joined_at")
  lastActiveAt  DateTime  @default(now()) @map("last_active_at")
  isVerified    Boolean   @default(false) @map("is_verified")
  isBanned      Boolean   @default(false) @map("is_banned")
  
  // Premium features
  isPremium     Boolean   @default(false) @map("is_premium")
  premiumUntil  DateTime? @map("premium_until")
  stripeCustomerId String? @map("stripe_customer_id")

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  threads       Thread[]
  reactions     Reaction[]
  badges        UserBadge[]
  notifications Notification[]
  reports       Report[]
  moderationActions ModerationAction[]
  bookmarks     Bookmark[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

// ============================================================================
// Forum Structure
// ============================================================================

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  icon        String?  // Emoji or icon name
  color       String?  // Hex color code
  position    Int      @default(0)
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  subcategories Subcategory[]
  threads       Thread[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?  @db.Text
  icon        String?
  color       String?
  position    Int      @default(0)
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  categoryId  String   @map("category_id")
  
  // Relations
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  threads     Thread[]

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model Thread {
  id             String    @id @default(cuid())
  title          String
  slug           String
  content        String    @db.Text
  isSticky       Boolean   @default(false) @map("is_sticky")
  isLocked       Boolean   @default(false) @map("is_locked")
  isDeleted      Boolean   @default(false) @map("is_deleted")
  viewCount      Int       @default(0) @map("view_count")
  postCount      Int       @default(0) @map("post_count")
  lastActivityAt DateTime  @default(now()) @map("last_activity_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Foreign Keys
  authorId       String    @map("author_id")
  categoryId     String    @map("category_id")
  subcategoryId  String?   @map("subcategory_id")
  
  // Relations
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category       Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory    Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  posts          Post[]
  bookmarks      Bookmark[]
  tags           ThreadTag[]

  @@unique([categoryId, slug])
  @@map("threads")
}

model Post {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isDeleted Boolean  @default(false) @map("is_deleted")
  isEdited  Boolean  @default(false) @map("is_edited")
  editedAt  DateTime? @map("edited_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  authorId  String   @map("author_id")
  threadId  String   @map("thread_id")
  parentId  String?  @map("parent_id") // For threaded replies
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parent    Post?    @relation("PostReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Post[]   @relation("PostReplies")
  reactions Reaction[]
  attachments Attachment[]
  reports   Report[]

  @@map("posts")
}

// ============================================================================
// Interactions & Engagement
// ============================================================================

model Reaction {
  id     String      @id @default(cuid())
  type   ReactionType
  
  // Foreign Keys
  userId String      @map("user_id")
  postId String      @map("post_id")
  
  // Relations
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("reactions")
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  ANGRY
  HELPFUL
  UNHELPFUL
}

model Bookmark {
  id       String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  
  // Foreign Keys
  userId   String   @map("user_id")
  threadId String   @map("thread_id")
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread   Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId])
  @@map("bookmarks")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String?
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  threads     ThreadTag[]

  @@map("tags")
}

model ThreadTag {
  // Foreign Keys
  threadId String @map("thread_id")
  tagId    String @map("tag_id")
  
  // Relations
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([threadId, tagId])
  @@map("thread_tags")
}

// ============================================================================
// User Progression & Gamification
// ============================================================================

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String   @db.Text
  icon        String   // Icon/emoji
  color       String   // Hex color
  rarity      BadgeRarity @default(COMMON)
  criteria    String   @db.Text // Description of how to earn it
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  users       UserBadge[]

  @@map("badges")
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model UserBadge {
  id        String   @id @default(cuid())
  earnedAt  DateTime @default(now()) @map("earned_at")
  isVisible Boolean  @default(true) @map("is_visible")
  
  // Foreign Keys
  userId    String   @map("user_id")
  badgeId   String   @map("badge_id")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// ============================================================================
// Moderation & Reports
// ============================================================================

model Report {
  id        String      @id @default(cuid())
  reason    ReportReason
  description String?   @db.Text
  status    ReportStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  resolvedAt DateTime?  @map("resolved_at")

  // Foreign Keys
  reporterId String     @map("reporter_id")
  postId     String?    @map("post_id")
  resolverId String?    @map("resolver_id")
  
  // Relations
  reporter   User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  post       Post?      @relation(fields: [postId], references: [id], onDelete: SetNull)
  resolver   User?      @relation(fields: [resolverId], references: [id], onDelete: SetNull)

  @@map("reports")
}

enum ReportReason {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  MISINFORMATION
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model ModerationAction {
  id        String           @id @default(cuid())
  action    ModerationActionType
  reason    String?          @db.Text
  duration  Int?             // In hours for temporary actions
  createdAt DateTime         @default(now()) @map("created_at")
  expiresAt DateTime?        @map("expires_at")

  // Foreign Keys
  moderatorId String         @map("moderator_id")
  targetUserId String        @map("target_user_id")
  
  // Relations
  moderator   User           @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  targetUser  User           @relation(fields: [targetUserId], references: [id], onDelete: Cascade)

  @@map("moderation_actions")
}

enum ModerationActionType {
  WARNING
  MUTE
  TEMPORARY_BAN
  PERMANENT_BAN
  REPUTATION_PENALTY
  CONTENT_REMOVAL
}

// ============================================================================
// Notifications & Communication
// ============================================================================

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false) @map("is_read")
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now()) @map("created_at")

  // Foreign Keys
  userId    String           @map("user_id")
  
  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  REPLY
  MENTION
  BADGE_EARNED
  THREAD_LOCKED
  THREAD_DELETED
  MODERATION_ACTION
  SYSTEM_ANNOUNCEMENT
  PREMIUM_EXPIRED
}

// ============================================================================
// File Management
// ============================================================================

model Attachment {
  id        String   @id @default(cuid())
  fileName  String   @map("file_name")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  // Foreign Keys
  postId    String   @map("post_id")
  
  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("attachments")
}