// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// User Management - References existing users table from main SaaS
// ============================================================================

// Note: This references the existing users table from the main SaaS backend
// The User model is maintained in the backend database.py file
// Forum-specific fields have been added to the main User model

// ============================================================================
// Forum Structure
// ============================================================================

model ForumCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  icon        String?  // Emoji or icon name
  color       String?  // Hex color code
  position    Int      @default(0)
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  subcategories ForumSubcategory[]
  threads       ForumThread[]

  @@map("forum_categories")
}

model ForumSubcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?  @db.Text
  icon        String?
  color       String?
  position    Int      @default(0)
  isVisible   Boolean  @default(true) @map("is_visible")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  categoryId  String   @map("category_id")
  
  // Relations
  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  threads     ForumThread[]

  @@unique([categoryId, slug])
  @@map("forum_subcategories")
}

model ForumThread {
  id             String    @id @default(cuid())
  title          String
  slug           String
  content        String    @db.Text
  isSticky       Boolean   @default(false) @map("is_sticky")
  isLocked       Boolean   @default(false) @map("is_locked")
  isDeleted      Boolean   @default(false) @map("is_deleted")
  viewCount      Int       @default(0) @map("view_count")
  postCount      Int       @default(0) @map("post_count")
  lastActivityAt DateTime  @default(now()) @map("last_activity_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Foreign Keys - References main users table
  authorId       String    @map("author_id")
  categoryId     String    @map("category_id")
  subcategoryId  String?   @map("subcategory_id")
  
  // Relations
  category       ForumCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory    ForumSubcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  posts          ForumPost[]
  bookmarks      ForumBookmark[]
  tags           ForumThreadTag[]

  @@unique([categoryId, slug])
  @@map("forum_threads")
}

model ForumPost {
  id        String   @id @default(cuid())
  content   String   @db.Text
  isDeleted Boolean  @default(false) @map("is_deleted")
  isEdited  Boolean  @default(false) @map("is_edited")
  editedAt  DateTime? @map("edited_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign Keys - References main users table
  authorId  String   @map("author_id")
  threadId  String   @map("thread_id")
  parentId  String?  @map("parent_id") // For threaded replies
  
  // Relations
  thread    ForumThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parent    ForumPost?    @relation("PostReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   ForumPost[]   @relation("PostReplies")
  reactions ForumReaction[]
  attachments ForumAttachment[]
  reports   ForumReport[]

  @@map("forum_posts")
}

// ============================================================================
// Interactions & Engagement
// ============================================================================

model ForumReaction {
  id     String      @id @default(cuid())
  type   ForumReactionType
  
  // Foreign Keys - References main users table
  userId String      @map("user_id")
  postId String      @map("post_id")
  
  // Relations
  post   ForumPost        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("forum_reactions")
}

enum ForumReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  ANGRY
  HELPFUL
  UNHELPFUL
}

model ForumBookmark {
  id       String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  
  // Foreign Keys - References main users table
  userId   String   @map("user_id")
  threadId String   @map("thread_id")
  
  // Relations
  thread   ForumThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId])
  @@map("forum_bookmarks")
}

model ForumTag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String?
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  threads     ForumThreadTag[]

  @@map("forum_tags")
}

model ForumThreadTag {
  // Foreign Keys
  threadId String @map("thread_id")
  tagId    String @map("tag_id")
  
  // Relations
  thread   ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tag      ForumTag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([threadId, tagId])
  @@map("forum_thread_tags")
}

// ============================================================================
// User Progression & Gamification - References main users table
// ============================================================================

model ForumBadge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String   @db.Text
  icon        String   // Icon/emoji
  color       String   // Hex color
  rarity      ForumBadgeRarity @default(COMMON)
  criteria    String   @db.Text // Description of how to earn it
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  users       ForumUserBadge[]

  @@map("forum_badges")
}

enum ForumBadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model ForumUserBadge {
  id        String   @id @default(cuid())
  earnedAt  DateTime @default(now()) @map("earned_at")
  isVisible Boolean  @default(true) @map("is_visible")
  
  // Foreign Keys - References main users table
  userId    String   @map("user_id")
  badgeId   String   @map("badge_id")
  
  // Relations
  badge     ForumBadge     @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("forum_user_badges")
}

// ============================================================================
// Moderation & Reports - References main users table
// ============================================================================

model ForumReport {
  id        String      @id @default(cuid())
  reason    ForumReportReason
  description String?   @db.Text
  status    ForumReportStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  resolvedAt DateTime?  @map("resolved_at")

  // Foreign Keys - References main users table
  reporterId String     @map("reporter_id")
  postId     String?    @map("post_id")
  resolverId String?    @map("resolver_id")
  
  // Relations
  post       ForumPost?      @relation(fields: [postId], references: [id], onDelete: SetNull)

  @@map("forum_reports")
}

enum ForumReportReason {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  MISINFORMATION
  OTHER
}

enum ForumReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model ForumModerationAction {
  id        String           @id @default(cuid())
  action    ForumModerationActionType
  reason    String?          @db.Text
  duration  Int?             // In hours for temporary actions
  createdAt DateTime         @default(now()) @map("created_at")
  expiresAt DateTime?        @map("expires_at")

  // Foreign Keys - References main users table
  moderatorId String         @map("moderator_id")
  targetUserId String        @map("target_user_id")

  @@map("forum_moderation_actions")
}

enum ForumModerationActionType {
  WARNING
  MUTE
  TEMPORARY_BAN
  PERMANENT_BAN
  REPUTATION_PENALTY
  CONTENT_REMOVAL
}

// ============================================================================
// Notifications & Communication - References main users table
// ============================================================================

model ForumNotification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      ForumNotificationType
  isRead    Boolean          @default(false) @map("is_read")
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now()) @map("created_at")

  // Foreign Keys - References main users table
  userId    String           @map("user_id")

  @@map("forum_notifications")
}

enum ForumNotificationType {
  REPLY
  MENTION
  BADGE_EARNED
  THREAD_LOCKED
  THREAD_DELETED
  MODERATION_ACTION
  SYSTEM_ANNOUNCEMENT
  PREMIUM_EXPIRED
}

// ============================================================================
// File Management
// ============================================================================

model ForumAttachment {
  id        String   @id @default(cuid())
  fileName  String   @map("file_name")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  url       String
  createdAt DateTime @default(now()) @map("created_at")

  // Foreign Keys
  postId    String   @map("post_id")
  
  // Relations
  post      ForumPost     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("forum_attachments")
}